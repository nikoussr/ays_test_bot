from aiogram.types import Message, CallbackQuery
from aiogram import Router
import app.keyboards as kb
from states.states import register, user, admin
from aiogram.fsm.context import FSMContext
from app.database.bd import Database
from configs import JOBS, CAFES, ADMIN

router = Router()
mas = []

db = Database('../data/ays_test_database.db')


def reg_condition(message: Message, condition_type):
    import re
    if condition_type == 'letters':
        return re.match('^[–ê-–Ø–Å][–∞-—è—ë]*$', message.text)
    elif condition_type == 'phone':
        return message.text.isdigit() and message.text.startswith('8') and len(message.text) == 11
    elif condition_type == 'date_of_birth':
        return re.match('\d{2}.\d{2}.\d{4}', message.text)


@router.callback_query(lambda q: q.data == 'register')
async def reg(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(inline_message_id=callback.inline_message_id, reply_markup=None)
    user_id = callback.from_user.id
    if db.user_exists(user_id):
        await callback.message.answer(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    else:
        await state.set_state(register.wait_first_name)
        db.add_user(callback.from_user.id)
        await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –∏–º—è')


@router.message(register.wait_first_name)
async def first(message: Message, state: FSMContext):
    if reg_condition(message, 'letters'):
        await state.update_data(wait_first_name=message.text)
        await state.set_state(register.wait_last_name)
        data = await state.get_data()
        db.set_first_name(message.from_user.id, data["wait_first_name"])
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é')

    else:
        await message.answer(f'–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –∏–º—è –µ—â—ë —Ä–∞–∑')
        await state.set_state(register.wait_first_name)


@router.message(register.wait_last_name)
async def second(message: Message, state: FSMContext):
    if reg_condition(message, 'letters'):
        await state.update_data(wait_last_name=message.text)
        data = await state.get_data()
        db.set_last_name(message.from_user.id, data["wait_last_name"])
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "89..."')
        await state.set_state(register.wait_phone_number)
    else:
        await message.answer(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Ñ–∞–º–∏–ª–∏—é –µ—â—ë —Ä–∞–∑")
        await state.set_state(register.wait_last_name)


@router.message(register.wait_phone_number)
async def third(message: Message, state: FSMContext):
    if reg_condition(message, 'phone'):
        await state.update_data(wait_phone_number=message.text)
        data = await state.get_data()
        db.set_phone_number(message.from_user.id, data["wait_phone_number"])
        await message.answer(f"–ö–æ–≥–¥–∞ –≤—ã —Ä–æ–¥–∏–ª–∏—Å—å?\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ - 01.02.2003")
        await state.set_state(register.wait_date_of_birth)
    else:
        await message.answer(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –∏—à–∏–±–∫–∞ –≤ –¥–ª–∏–Ω–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –µ—â—ë —Ä–∞–∑")
        await state.set_state(register.wait_phone_number)


@router.message(register.wait_date_of_birth)
async def third(message: Message, state: FSMContext):
    if reg_condition(message, 'date_of_birth'):
        await state.update_data(wait_for_date_of_birth=message.text)
        data = await state.get_data()
        db.set_date_of_birth(message.from_user.id, data["wait_for_date_of_birth"])
        await message.answer(f"–ì–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?", reply_markup=kb.create_cafe_id_btns_register())
        await state.set_state(register.wait_cafe_id)
    else:
        await message.answer(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –µ—â—ë —Ä–∞–∑")
        await state.set_state(register.wait_date_of_birth)


@router.callback_query(
    lambda q: q.data in CAFES,
    register.wait_cafe_id)
async def cafes(callback: CallbackQuery, state: FSMContext):
    if callback.message.text != "/start":
        db.set_cafe_id(callback.from_user.id, callback.data[0])
        await callback.message.edit_text("–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –≤—ã–±—Ä–∞–Ω–æ", reply_markup=None)
        await callback.message.answer(f"–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?",
                                      reply_markup=kb.create_job_id_btns_register(callback.data[0]))
        await state.set_state(register.wait_job_id)


@router.callback_query(register.wait_job_id)
async def jobs(callback: CallbackQuery, state: FSMContext):
    db.set_job_id(callback.from_user.id, callback.data[0])
    await callback.message.edit_text("–î–æ–ª–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞", reply_markup=None)
    user_info = db.get_all_info(callback.from_user.id)[0]
    await callback.message.answer(
        f"üë§ –í–∞—Å –∑–æ–≤—É—Ç - {user_info[0]} {user_info[1]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {user_info[2]}\n–î–∞—Ç–∞ —Ä–∞–∂–¥–µ–Ω–∏—è - {user_info[3]}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å - {user_info[4]}\n–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã - {user_info[5]}\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=kb.y_n_btns)
    await state.set_state(register.wait_yes_no)

    @router.callback_query(lambda q: q.data == 'yes', register.wait_yes_no)
    async def yes(callback: CallbackQuery, state: FSMContext):
        await callback.message.edit_text(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', reply_markup=None)
        user_id = str(callback.from_user.id)
        print(f"–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è {user_id}")
        if user_id not in ADMIN:
            await callback.message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —é–∑–µ—Ä-–ø–∞–Ω–µ–ª—å, {db.get_first_name(user_id)} {db.get_last_name(user_id)}!",
                reply_markup=kb.user_manager_btns if db.get_job_id(user_id) == 1 else kb.user_btns)
            await state.set_state(user.wait_user)
        else:
            await callback.message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {db.get_first_name(user_id)} {db.get_last_name(user_id)}!",
                reply_markup=kb.admin_btns)
            await state.set_state(admin.wait_admin)

    @router.callback_query(lambda q: q.data == 'no', register.wait_yes_no)
    async def no(callback: CallbackQuery, state: FSMContext):
        await state.set_state(register.wait_first_name)
        await callback.message.edit_text('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...', reply_markup=None)
        await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –∏–º—è')

