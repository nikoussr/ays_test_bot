import aiogram.exceptions
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InputMediaDocument, \
    InlineKeyboardButton
from aiogram.filters import Command
from aiogram import Router
import app.keyboards as kb
from states.states import admin, user
from aiogram.fsm.context import FSMContext
from app.database.bd import Database
from main import bot
from configs import JOBS, CAFES

router = Router()
mas = []

db = Database('../data/ays_test_database.db')

"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""


@router.callback_query(admin.wait_admin)
async def admin_panel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    if callback.data == 'all_message':
        keyboard = kb.create_cafe_id_btns_message()
        keyboard.inline_keyboard.append([InlineKeyboardButton(text='‚è™ –í—ã–π—Ç–∏', callback_data='exit')])
        await callback.message.edit_text("–ö–æ–º—É —Ö–æ—Ç–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?", reply_markup=keyboard)
        await state.set_state(admin.wait_all_message)

    elif callback.data == 'user_data':
        keyboard = kb.create_cafe_id_people_btns()
        keyboard.inline_keyboard.append([InlineKeyboardButton(text='‚è™ –í—ã–π—Ç–∏', callback_data='exit')])
        await callback.message.edit_text("–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ", reply_markup=keyboard)
        await state.set_state(admin.wait_user_FL)

    elif callback.data == 'make_a_chapter':
        keyboard = kb.create_cafe_btns()
        keyboard.inline_keyboard.append([InlineKeyboardButton(text='‚è™ –í—ã–π—Ç–∏', callback_data='exit')])
        await callback.message.edit_text("–î–ª—è –∫–æ–≥–æ –±—É–¥–µ—Ç –ë–ó?", reply_markup=keyboard)
        await state.set_state(admin.wait_for_cafe_id)

    elif callback.data == 'list_of_kd':
        keyboard = kb.create_cafe_btns()
        keyboard.inline_keyboard.append([InlineKeyboardButton(text='‚è™ –í—ã–π—Ç–∏', callback_data='exit')])
        await callback.message.edit_text("–î–ª—è –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ë–ó?", reply_markup=keyboard)
        await state.set_state(admin.wait_for_job_id_2)

    elif callback.data == "find_admin_kd":
        await callback.message.edit_text("–ü–æ–∏—Å–∫ –ë–ó –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
        await state.set_state(admin.wait_for_find_kd)
    elif callback.data == "admin_to_user":
        await state.clear()
        await state.set_state(user.wait_user)
        await callback.message.delete(inline_message_id=callback.inline_message_id)
        user_id = callback.from_user.id
        await callback.message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —é–∑–µ—Ä-–ø–∞–Ω–µ–ª—å, {db.get_first_name(user_id)} {db.get_last_name(user_id)}!",
            reply_markup=kb.user_manager_btns if db.get_job_id(user_id) == 1 else kb.user_btns)
    elif callback.data == "show_all_wants":
        all_wants = db.get_all_wants()
        for want in all_wants:
            await callback.message.answer(f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {want[1]}:`\n{want[2]}`\n–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ `/reply {want[0]} –û–¢–í–ï–¢`", parse_mode='Markdown')


"""–ü–æ–∏—Å–∫ –∏–Ω—Ñ—ã –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"""


@router.callback_query(admin.wait_user_FL)
async def choose_user(callback: CallbackQuery, state: FSMContext):
    if callback.data == "exit":
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        user_id = callback.from_user.id
        await callback.message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {db.get_first_name(user_id)} {db.get_last_name(user_id)}!",
            reply_markup=kb.admin_btns)
        await state.set_state(admin.wait_admin)
    else:
        data = callback.data.split('_')
        cafe_id = data[0]
        cafe = data[1]
        await state.update_data(wait_user_FL=(cafe_id, cafe))
        people = db.get_people(cafe_id)
        await callback.message.edit_text(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ {cafe}", reply_markup=kb.create_job_people_btns(people))
        await state.set_state(admin.wait_user_info)


@router.callback_query(admin.wait_user_info)
async def get_user_data(callback: CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    user_id = callback.data
    info = db.get_user(user_id)
    await callback.message.answer(f"–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä: {info[0]}\n"
                                  f"T–µ–ª–µ–≥—Ä–∞–º id: {info[1]}\n"
                                  f"–§–ò: {info[2]} {info[3]}\n"
                                  f"–î–∞—Ç–∞ —Ä–∞–∂–¥–µ–Ω–∏—è: {info[4]}\n"
                                  f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {info[5]}\n"
                                  f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {info[6]}\n"
                                  f"–ó–∞–≤–µ–¥–µ–Ω–∏–µ: {info[7]}\n"
                                  f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {info[8]}", reply_markup=kb.update_user_btns)
    await state.update_data(wait_user_info=info[1])
    await state.set_state(admin.wait_for_user_update)


@router.callback_query(admin.wait_for_user_update)
async def choose_user_update(callback: CallbackQuery, state: FSMContext):
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)
    if callback.data == 'change_job_id':
        keyboard = kb.create_job_id_btns_register()
        await callback.message.answer(f"–ù–∞ –∫–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?", reply_markup=keyboard)
        await state.set_state(admin.wait_for_change_job_id)

        @router.callback_query(admin.wait_for_change_job_id)
        async def change_job_id(callback: CallbackQuery, state: FSMContext):
            if callback.data != 'back':
                await bot.edit_message_reply_markup(chat_id=callback.from_user.id,
                                                    message_id=callback.message.message_id,
                                                    reply_markup=None)
                data = await state.get_data()
                user_id = data["wait_user_info"]
                job = callback.data
                db.set_job_id(user_id, job[0])
                await callback.message.edit_text(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å {job[2:]}",
                                                 reply_markup=kb.exit_btns)
    elif callback.data == 'change_cafe_id':
        keyboard = kb.create_cafe_id_btns_register()
        await callback.message.answer(f"–í –∫–∞–∫–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?", reply_markup=keyboard)
        await state.set_state(admin.wait_for_change_cafe_id)

        @router.callback_query(admin.wait_for_change_cafe_id)
        async def change_cafe_id(callback: CallbackQuery, state: FSMContext):
            if callback.data != 'back':
                await bot.edit_message_reply_markup(chat_id=callback.from_user.id,
                                                    message_id=callback.message.message_id,
                                                    reply_markup=None)
                data = await state.get_data()
                user_id = data["wait_user_info"]
                cafe = callback.data
                db.set_cafe_id(user_id, cafe[0])
                await callback.message.edit_text(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ {cafe[2:]}", reply_markup=kb.exit_btns)
    elif callback.data == 'delete_user':
        await callback.message.answer(
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–≤, –æ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!",
            reply_markup=kb.y_n_btns)
        await state.set_state(admin.wait_for_delete_user)

        @router.callback_query(admin.wait_for_delete_user)
        async def delete_user(callback: CallbackQuery, state: FSMContext):
            if callback.data == "yes":
                data = await state.get_data()
                delete_user_id = data["wait_user_info"]
                if callback.message.from_user.id != delete_user_id:
                    db.set_banned_user(delete_user_id)
                    db.delete_user(delete_user_id)
                    await bot.edit_message_text(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª—ë–Ω", chat_id=callback.message.chat.id,
                                                message_id=callback.message.message_id)
                    user_id = callback.from_user.id
                    await callback.message.answer(
                        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {db.get_first_name(user_id)} {db.get_last_name(user_id)}!",
                        reply_markup=kb.admin_btns)
                    await state.set_state(admin.wait_admin)
            elif callback.data == "no":
                await bot.delete_message(chat_id=callback.from_user.id,
                                         message_id=callback.message.message_id)
                user_id = callback.from_user.id
                await callback.message.answer(
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {db.get_first_name(user_id)} {db.get_last_name(user_id)}!",
                    reply_markup=kb.admin_btns)
                await state.set_state(admin.wait_admin)
    elif callback.data == 'back':
        data = await state.get_data()
        cafe_id = data["wait_user_FL"][0]
        cafe = data["wait_user_FL"][1]
        await state.update_data(wait_user_FL=(cafe_id, cafe))
        people = db.get_people(cafe_id)
        await callback.message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ {cafe}", reply_markup=kb.create_job_people_btns(people))
        await state.set_state(admin.wait_user_info)
    elif callback.data == 'exit':
        user_id = callback.from_user.id
        await callback.message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {db.get_first_name(user_id)} {db.get_last_name(user_id)}!",
            reply_markup=kb.admin_btns)
        await state.set_state(admin.wait_admin)


"""–†–∞—Å—Å—ã–ª–∫–∞"""


@router.callback_query(admin.wait_all_message)
async def get_user_ids(callback: CallbackQuery, state: FSMContext):
    if callback.data == "exit":
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        user_id = callback.from_user.id
        await callback.message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {db.get_first_name(user_id)} {db.get_last_name(user_id)}!",
            reply_markup=kb.admin_btns)
        await state.set_state(admin.wait_admin)
    else:
        print("–î–µ–ª–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É")
        data = callback.data.split('_')
        cafe_id = data[0]
        cafe = data[1]
        await state.update_data(wait_all_message=cafe_id)
        await callback.message.edit_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–ª—è: {cafe}")
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
        await state.set_state(admin.wait_for_cafe_mes)


@router.message(admin.wait_for_cafe_mes)
async def get_user_ids(message: Message, state: FSMContext):
    data = await state.get_data()
    cafe_id = data["wait_all_message"]
    text = message.caption  # –±–µ—Ä–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç
    document = message.document
    if not text:
        text = message.text
    photo = message.photo  # –±–µ—Ä–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    group_elements = []  # —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–≤–∏–¥–µ–≤–∞, —Ñ–æ—Ç–æ–± –∞—É–¥–∏–æ...)
    if photo is not None:  # –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–æ —Ñ–æ—Ç–æ, —Ç–æ
        photo = photo[-1].file_id  # –±–µ—Ä–µ–º —Å–∞–º–æ–µ –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ [-1]
        group_elements.append(InputMediaPhoto(media=photo))
    if document is not None:  # –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç, —Ç–æ
        document = document.file_id  # –±–µ—Ä–µ–º id —Ñ–∞–π–ª–∞
        input_media = InputMediaDocument(media=document)
        group_elements.append(input_media)
    if cafe_id == "0":
        all_ids = db.get_all_ids()  # –±–µ—Ä—ë—Ç –∏–∑ –ë–î –≤—Å–µ id

    else:
        all_ids = db.get_all_ids_cafe(cafe_id)

    cnt = 0
    if group_elements and text:
        for id in all_ids:
            try:
                await bot.send_media_group(id[0], group_elements)
                await bot.send_message(id[0], text)
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—à–ª–æ –¥–æ {id[0]}")
                cnt += 1
            except:
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—à–ª–æ –¥–æ {id[0]}")
    elif group_elements:
        for id in all_ids:
            try:
                await bot.send_media_group(id[0], group_elements)
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—à–ª–æ –¥–æ {id[0]}")
                cnt += 1
            except:
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—à–ª–æ –¥–æ {id[0]}")
    elif text:
        for id in all_ids:
            try:
                await bot.send_message(id[0], text)
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—à–ª–æ –¥–æ {id[0]}")
                cnt += 1
            except:
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—à–ª–æ –¥–æ {id[0]}")

    await message.answer(
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {cnt}/{len(all_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞",
        reply_markup=kb.exit_btns)


"""–°–æ–∑–¥–∞–Ω–∏–µ –ë–ó"""


@router.callback_query(
    lambda q: q.data in CAFES or q.data == "exit", admin.wait_for_cafe_id)
async def set_cafe_id(callback: CallbackQuery, state: FSMContext):
    if callback.data == "exit":
        user_id = callback.from_user.id
        await callback.message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {db.get_first_name(user_id)} {db.get_last_name(user_id)}!",
            reply_markup=kb.admin_btns)
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        await state.set_state(admin.wait_admin)
    else:
        print("–°–æ–∑–¥–∞—ë—Ç –ë–ó, –≤—ã–±–æ—Ä –∑–∞–≤–µ–¥–µ–Ω–∏—è")
        cafe_id = callback.data.split('_')  # –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1_–ë—É–≥–µ–ª—å –í—É–≥–µ–ª—å"
        await state.update_data(wait_for_cafe_id=cafe_id)
        await callback.message.edit_text(f'–ë–ó –±—É–¥–µ—Ç –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è: {cafe_id[1]}')
        await callback.message.answer(f"–î–ª—è –∫–æ–≥–æ –±—É–¥–µ—Ç –ë–ó?", reply_markup=kb.create_job_btns(cafe_id[0]))
        await state.set_state(admin.wait_for_job_id_1)


@router.callback_query(
    lambda q: q.data in JOBS, admin.wait_for_job_id_1)
async def set_job_id(callback: CallbackQuery, state: FSMContext):
    print("–°–æ–∑–¥–∞—ë—Ç –ë–ó, –≤—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")

    job_id = callback.data.split('_')  # –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1_–ú–µ–Ω–µ–¥–∂–µ—Ä"
    data = await state.get_data()
    cafe_id = data["wait_for_cafe_id"]
    await state.update_data(wait_for_job_id_1=job_id)  # —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –ë–î
    await callback.message.edit_text(f'–ë–ó –±—É–¥–µ—Ç –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {job_id[1]}')
    all_folders = db.get_folders(cafe_id=cafe_id[0], job_id=job_id[0])
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é",
                                  reply_markup=kb.create_folders_btn(all_folders=all_folders))
    await state.set_state(admin.wait_for_folder)


@router.callback_query(admin.wait_for_folder)
async def create_new_folder(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'new_folder':
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–∞–ø–∫–∏")
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)

        @router.message()
        async def new_folder_name(message: Message):
            folder_name = message.text
            await state.update_data(wait_for_folder=folder_name)
            await bot.edit_message_text(text=f"–ü–∞–ø–∫–∞: {folder_name}", chat_id=message.chat.id,
                                        message_id=message.message_id - 1)
            await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ë–ó")
            await state.set_state(admin.wait_for_chapter_name)
    else:
        data = callback.data
        data = data.split('_')
        folder_name = data[1]
        await state.update_data(wait_for_folder=data)
        await bot.edit_message_text(text=f"–ü–∞–ø–∫–∞: {folder_name}", chat_id=callback.message.chat.id,
                                    message_id=callback.message.message_id)
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ë–ó")
        await state.set_state(admin.wait_for_chapter_name)


@router.message(admin.wait_for_chapter_name)
async def set_chapter_name(message: Message, state: FSMContext):
    print("–°–æ–∑–¥–∞—ë—Ç –ë–ó, –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ")
    schapter_name = message.text
    await state.update_data(wait_for_chapter_name=schapter_name)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ë–ó. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã")
    await state.set_state(admin.wait_for_chapter_text)


@router.message(admin.wait_for_chapter_text)
async def set_chapter_text_file(message: Message, state: FSMContext):
    print("–°–æ–∑–¥–∞—ë—Ç –ë–ó, –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç + —Ñ–∞–π–ª")

    data = await state.get_data()
    photos = data.get('photos', [])
    documents = data.get('documents', [])
    captions = data.get('captions', {})
    texts = data.get('texts', [])
    if message.text:
        # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for x in range(0, len(message.text), 4000):
            text = message.text[x:x + 4000]
            texts.append(text)
        await state.update_data(texts=texts)

    elif message.photo:
        # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
        photo_id = message.photo[-1].file_id
        photos.append((photo_id, 'photo'))
        if len(photos) == 1:
            caption = message.caption
            captions[photo_id] = caption
        await state.update_data(photos=photos, captions=captions)
    elif message.document:
        document_id = message.document.file_id
        documents.append((document_id, 'document'))
        await state.update_data(documents=documents)
    try:
        await bot.edit_message_text(text=f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–≤–µ–¥—ë–Ω —Ç–µ–∫—Å—Ç?", chat_id=message.chat.id,
                                    message_id=message.message_id - 1, reply_markup=kb.y_n_btns)
    except aiogram.exceptions.TelegramBadRequest:
        pass
    await state.set_state(admin.wait_yes_no)

    @router.callback_query(lambda q: q.data == 'yes', admin.wait_yes_no)
    async def yes(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        cafe_id = data["wait_for_cafe_id"][0]
        job_id = data["wait_for_job_id_1"][0]
        kd_name = data["wait_for_chapter_name"]
        photos = data.get('photos', [])
        captions = data.get('captions', {})
        documents = data.get('documents', [])
        kd_text = data.get('texts', [])
        text = ''
        for x in kd_text:
            text += x
        if isinstance(data["wait_for_folder"], list):
            folder_id = data["wait_for_folder"][0]
            if text or photos:
                db.set_kd(cafe_id, job_id, kd_name, folder_id, (text if text != "" else captions.get(photos[0][0])))
            else:
                db.set_kd(cafe_id, job_id, kd_name, folder_id, '')
            base_id = db.get_base_id()
            if photos:
                for photo in photos:
                    db.set_kd_file(base_id, photo)
            elif documents:
                for document in documents:
                    db.set_kd_file(base_id, document)


        else:
            folder_name = data["wait_for_folder"]
            db.set_folder_name(folder_name=folder_name)
            folder_id = db.get_folder_id()
            if text or photos:
                db.set_kd(cafe_id, job_id, kd_name, folder_id, (text if kd_text else captions.get(photos[0])))
            else:
                db.set_kd(cafe_id, job_id, kd_name, folder_id, '')
            base_id = db.get_base_id()
            if photos:
                for photo in photos:
                    db.set_kd_file(base_id, photo)
            elif documents:
                for document in documents:
                    db.set_kd_file(base_id, document)
        await callback.message.edit_text(f'–ë–ó —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', reply_markup=kb.exit_btns)
        await state.clear()

    @router.callback_query(lambda q: q.data == 'no', admin.wait_yes_no)
    async def no(callback: CallbackQuery, state: FSMContext):
        db.delete_unkd()
        await state.clear()
        await state.set_state(admin.wait_admin)
        await callback.message.edit_text('–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ë–ó...', reply_markup=None)
        await callback.message.answer(f"–î–ª—è –∫–æ–≥–æ –±—É–¥–µ—Ç –ë–ó?", reply_markup=kb.create_cafe_btns())
        await state.set_state(admin.wait_for_cafe_id)


"""–ü—Ä–æ—Å–º–æ—Ç—Ä –ë–ó"""


@router.callback_query(lambda q: q.data in CAFES or q.data == "exit", admin.wait_for_job_id_2)
async def list_of_cafes(callback: CallbackQuery, state: FSMContext):
    if callback.data == "exit":
        user_id = callback.from_user.id
        await callback.message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {db.get_first_name(user_id)} {db.get_last_name(user_id)}!",
            reply_markup=kb.admin_btns)
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        await state.set_state(admin.wait_admin)
    else:
        print("–°–º–æ—Ç—Ä–∏—Ç –ë–ó, –≤—ã–±–∏—Ä–∞–µ—Ç –∑–∞–≤–µ–¥–µ–Ω–∏–µ")
        cafe_id = callback.data.split('_')
        await state.update_data(wait_for_job_2=cafe_id[0])
        await callback.message.edit_text(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –ë–ó –¥–ª—è {cafe_id[1]}")
        await callback.message.answer(f"–î–ª—è –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ë–ó?", reply_markup=kb.create_job_btns(cafe_id[0]))
        await state.set_state(admin.wait_for_click_kd_3)


@router.callback_query(lambda q: q.data in JOBS, admin.wait_for_click_kd_3)
async def list_of_jobs(callback: CallbackQuery, state: FSMContext):
    print("–°–º–æ—Ç—Ä–∏—Ç –ë–ó, –≤—ã–±–∏—Ä–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
    data = await state.get_data()
    cafe_id = data["wait_for_job_2"]
    job = callback.data.split('_')
    await state.update_data(wait_for_click_kd_3=job)
    all_folders = db.get_folders(cafe_id=cafe_id[0], job_id=job[0])
    all_folders = kb.create_folders_btn_look_admin(all_folders=all_folders)
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É",
                                  reply_markup=all_folders)
    await callback.message.edit_text(f"–í–æ—Ç –≤—Å–µ –ø–∞–ø–∫–∏ –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ {job[1]}", reply_markup=None)
    await state.set_state(admin.wait_for_click_kd_4)


@router.callback_query(admin.wait_for_click_kd_4)
async def create_new_folder(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cafe_id = data["wait_for_job_2"]
    job = data["wait_for_click_kd_3"]
    folder_id = callback.data
    folder_id = folder_id.split('_')
    kd_btns = kb.make_kd_kb_admin(job[0], cafe_id, folder_id[0])
    await callback.message.edit_text(f"–í–æ—Ç –≤—Å–µ –ë–ó –≤ –ø–∞–ø–∫–µ {folder_id[1]}", reply_markup=kd_btns)
    await state.set_state(admin.wait_for_click_kd_5)


@router.callback_query(lambda q: q.data, admin.wait_for_click_kd_5)
async def text_of_chapter(callback: CallbackQuery, state: FSMContext):
    global text
    data = callback.data.split('_')
    base_id = data[0]
    photos_group_elements = []  # —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–≤–∏–¥–µ–≤–∞, —Ñ–æ—Ç–æ–± –∞—É–¥–∏–æ...)
    documents_group_elements = []  # —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–≤–∏–¥–µ–≤–∞, —Ñ–æ—Ç–æ–± –∞—É–¥–∏–æ...)
    try:
        files = db.get_kd_files(base_id)
        for file in files:  # –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–æ —Ñ–æ—Ç–æ, —Ç–æ
            element = file[0]
            file_type = file[1]
            if file_type == 'photo':
                try:
                    photos_group_elements.append(InputMediaPhoto(media=element))  # –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
                except:
                    pass
            elif file_type == 'document':
                try:
                    documents_group_elements.append(InputMediaDocument(media=element))  # –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
                except:
                    pass
    except:
        print("prozoshol pizdec1")
    try:
        await callback.message.answer_media_group(documents_group_elements)
    except:
        pass

    try:
        await callback.message.answer_media_group(photos_group_elements)
    except:
        pass

    try:
        KD_text = db.get_kd_text(base_id)
        for x in range(0, len(KD_text), 4096):
            if len(KD_text) - x <= 4096:
                text = KD_text[x:x + 4096]
                break
            text = KD_text[x:x + 4096]
            await callback.message.answer(f"{text}")
        await callback.message.answer(f"{text}", reply_markup=kb.edit_btns)
    except:
        await callback.message.answer(text=f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=kb.edit_btns)
    await state.update_data(wait_for_click_kd_1=base_id)
    await state.set_state(admin.wait_for_click_kd_2)


"""–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–ó"""


@router.callback_query(lambda q: q.data, admin.wait_for_click_kd_2)
async def text_of_chapterh(callback: CallbackQuery, state: FSMContext):
    print("–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ë–ó, –≤—ã–±–∏—Ä–∞–µ—Ç —á—Ç–æ")
    if callback.data == 'exit':
        await state.set_state(admin.wait_admin)
        await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                            reply_markup=None)
        user_id = callback.from_user.id
        await callback.message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {db.get_first_name(user_id)} {db.get_last_name(user_id)}!",
            reply_markup=kb.admin_btns)
    elif callback.data == 'edit_text':
        await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                            reply_markup=None)
        await state.set_state(admin.wait_for_edit_text)
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
    elif callback.data == 'edit_name':
        await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                            reply_markup=None)
        await state.set_state(admin.wait_for_edit_name)
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ë–ó")
    elif callback.data == 'edit_file':
        await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                            reply_markup=None)
        await state.set_state(admin.wait_for_edit_file)
        await callback.message.answer(
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0")
    elif callback.data == 'delete_kd':
        await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                            reply_markup=None)
        await state.set_state(admin.wait_for_check_3)
        await callback.message.answer(f"–£–¥–∞–ª–∏—Ç—å –ë–ó?", reply_markup=kb.y_n_btns)

        @router.callback_query(lambda q: q.data == 'yes', admin.wait_for_check_3)
        async def yes(callback: CallbackQuery, state: FSMContext):
            data = await state.get_data()
            db.delete_kd(data["wait_for_click_kd_1"])
            db.delete_unkd()
            await callback.message.answer(f'–ë–ó —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', reply_markup=kb.exit_btns)
            await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                                reply_markup=None)

        @router.callback_query(lambda q: q.data == 'no', admin.wait_for_check_3)
        async def no(callback: CallbackQuery, state: FSMContext):
            await state.set_state(admin.wait_admin)
            await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
            user_id = callback.from_user.id
            await callback.message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {db.get_first_name(user_id)} {db.get_last_name(user_id)}!",
                reply_markup=kb.admin_btns)


@router.message(admin.wait_for_edit_text)
async def edit_text(message: Message, state: FSMContext):
    all_text = ''
    data = await state.get_data()
    texts = data.get('texts', [])
    if message.text:
        for x in range(0, len(message.text), 4090):
            text = message.text[x:x + 4090]
            texts.append(text)
        await state.update_data(texts=texts)
    await bot.edit_message_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–≤–µ–¥—ë–Ω –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç?", chat_id=message.chat.id,
                                message_id=message.message_id - 1, reply_markup=kb.update_chapter_btns)
    await state.set_state(admin.wait_for_check_1)

    @router.callback_query(lambda q: q.data == 'okey', admin.wait_for_check_1)
    async def yes(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        kd_text = data.get('texts', [])
        text = ''
        for x in kd_text:
            text += x
        db.set_kd_text(data["wait_for_click_kd_1"], text)
        await state.clear()
        await callback.message.answer(f'–ë–ó —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞', reply_markup=kb.exit_btns)
        await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                            reply_markup=None)

    @router.callback_query(lambda q: q.data == 'not_okey', admin.wait_for_check_1)
    async def no(callback: CallbackQuery, state: FSMContext):
        await state.set_state(admin.wait_admin)
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        user_id = callback.from_user.id
        await callback.message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {db.get_first_name(user_id)} {db.get_last_name(user_id)}!",
            reply_markup=kb.admin_btns)


@router.message(admin.wait_for_edit_file)
async def edit_file(message: Message, state: FSMContext):
    data = await state.get_data()
    base_id = data["wait_for_click_kd_1"]
    if message.text == "0":
        db.delete_kd_file(base_id)
    else:
        try:
            photo = message.photo  # –±–µ—Ä–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            photo = (photo[-1].file_id, 'photo')  # –±–µ—Ä–µ–º —Å–∞–º–æ–µ –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ [-1]
            db.set_kd_file(base_id, photo)
        except:
            document = message.document  # –±–µ—Ä–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            document = (document.file_id, 'document')  # –±–µ—Ä–µ–º —Å–∞–º–æ–µ –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ [-1]
            db.set_kd_file(base_id, document)
    try:
        await bot.edit_message_text(text=f'–ë–ó —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞', chat_id=message.chat.id,
                                    message_id=message.message_id - 1, reply_markup=kb.exit_btns)
    except aiogram.exceptions.TelegramBadRequest:
        pass


@router.message(admin.wait_for_edit_name)
async def edit_name(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(wait_for_edit_name=message.text)
    await bot.edit_message_text(f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n{message.text}\n–í—Å—ë –≤–µ—Ä–Ω–æ?", chat_id=message.chat.id,
                                message_id=message.message_id - 1, reply_markup=kb.update_chapter_btns)
    await state.set_state(admin.wait_for_check_2)

    @router.callback_query(lambda q: q.data == 'okey', admin.wait_for_check_2)
    async def yes(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        db.set_kd_name(data["wait_for_click_kd_1"], data["wait_for_edit_name"])
        await callback.message.answer(f'–ë–ó —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞', reply_markup=kb.exit_btns)
        await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                            reply_markup=None)

    @router.callback_query(lambda q: q.data == 'not_okey', admin.wait_for_check_2)
    async def no(callback: CallbackQuery, state: FSMContext):
        await state.set_state(admin.wait_admin)
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        user_id = callback.from_user.id
        await callback.message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {db.get_first_name(user_id)} {db.get_last_name(user_id)}!",
            reply_markup=kb.admin_btns)


@router.message(admin.wait_for_find_kd)
async def find_kd(message: Message, state: FSMContext):
    find_text = str(message.text)
    all_kd = db.get_all_kd_base()
    base_ids = []
    for kd in all_kd:
        text = str(db.get_kd_text(kd[1])).lower()
        if (find_text.lower() in text):
            base_ids.append(kd[1])
    if base_ids:
        await message.answer(f"–í—ã–±–∏—Ä–∞–π", reply_markup=kb.make_kd_kb_base_ids(base_ids))
        await state.set_state(admin.wait_for_click_kd_5)
    else:
        await message.answer(f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=kb.exit_btns)


@router.message(Command("reply"))
async def want_reply(message:Message, state:FSMContext):
    data = message.text.split(' ')
    want_id = data[1]
    user_id = db.get_want_user_id(want_id)
    want_text = data[2:]
    want_text = ' '.join(want_text)
    await bot.send_message(chat_id=user_id, text=f"üì© –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n{want_text}")
    db.set_wants_is_answered(want_id)



"""–í—ã—Ö–æ–¥"""


@router.callback_query(lambda q: q.data == 'exit')
async def user_data(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await callback.message.answer(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {db.get_first_name(user_id)} {db.get_last_name(user_id)}!",
        reply_markup=kb.admin_btns)
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)
    await state.set_state(admin.wait_admin)
